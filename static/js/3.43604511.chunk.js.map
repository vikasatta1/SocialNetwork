{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MuPosts/MyPosts.module.css","components/Profile/MuPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MuPosts/Post/Post.tsx","components/Profile/MuPosts/MyPosts.tsx","components/Profile/MuPosts/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileInfo/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","userPhoto","mainPhoto","Preloader","Post","item","message","likesCount","maxLength","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","TextArea","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","map","p","newPostElement","createRef","postsBlock","values","current","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileThunkCreator","getStatusThunk","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.43604511.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3dO1g\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Edc-\",\"contact\":\"ProfileInfo_contact__3q9lG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2DC_3\",\"posts\":\"MyPosts_posts__3ZXbC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1VohW\"};","import React, {useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || \"Hello Vika\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       onBlur={deActivatedEditMode}\r\n                       onChange={onStatusChange}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../images/user.png\";\ntype ProfileInfoType = {\n    profile:ProfileType | null\n    status:string\n    updateStatus:(status:string) => void\n}\n\nconst ProfileInfo = (props:ProfileInfoType) => {\n    if (!props.profile ){\n        return <Preloader/>\n    }\n\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto}/>\n               < ProfileStatusWithHooks\n                   status={props.status}\n                   updateStatus={props.updateStatus}\n               />\n            </div>\n        </div>\n    );\n}\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css';\n\ntype PostPropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img src='https://i.pinimg.com/originals/9c/77/46/9c7746225873e02d83b9315501b8dd2f.jpg'/>\n            {props.message}\n            <div>\n            <span>like</span>\n                {props.likesCount}\n            </div>\n        </div>\n    )\n}\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport TextArea from \"../../common/FormsControl/FormsControl\";\nimport {PostsType} from \"../../../Redux/profile-reducer\";\n\ntype MyPostType = {\n    posts: Array<PostsType>\n    addPost:(newPostText:string) => void\n}\ntype FormDataType = {\n    newPostText: string\n}\nconst maxLength = maxLengthCreator(10)\nconst addNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name={'newPostText'}\n                    component={TextArea} placeholder={'Post message'}\n                    validate={[required, maxLength]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n\n        </form>\n    )\n}\nconst AddPostFormRedux = reduxForm<FormDataType>({\n    form: \"ProfileAddNewPostForm\"\n})(addNewPostForm)\n\n\n\nconst MyPosts = React.memo((props:MyPostType) =>{\n    const postsElements =\n        props.posts.map((p: { message: string; likesCount: number; }) => <Post message={p.message}\n                                                                               likesCount={p.likesCount}/>)\n    const newPostElement = React.createRef<HTMLTextAreaElement>();\n    let onAddPost = (values: any) => {\n        if (newPostElement.current !== null) {\n            props.addPost(values.newPostText);\n        }\n    };\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n})\n\n\nexport default MyPosts;","import React from 'react';\nimport MyPosts from \"../MyPosts\";\nimport {\n    addPostActionCreator,\n}\n    from \"../../../../Redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../../Redux/reduxe-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapDispatchToPropsType = {\n    addPost:(newPostText:string) => void\n}\nconst mapStateProps = (state:AppStateType) => {\n    return {\n        posts:state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch):mapDispatchToPropsType => {\n    return {\n        addPost:(newPostText:string) =>{\n            dispatch(addPostActionCreator(newPostText));},\n    }\n}\n\n\nconst MyPostsContainer = connect(mapStateProps,mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MuPosts/Post/MyPostsContainer\";\nimport {ProfileType} from \"../../Redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status:string\n    updateStatus:(status:string) => void\n\n}\n\nconst Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n\n    );\n}\nexport default Profile;","import React from 'react';\r\nimport {AppStateType} from \"../../../Redux/reduxe-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunk,\r\n    getUserProfileThunkCreator,\r\n    ProfileType,\r\n    updateStatus\r\n} from \"../../../Redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport Profile from \"../Profile\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype OwnProps = {}\r\ntype PathParamsType = {\r\n    userId: number | null\r\n}\r\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\r\ntype mapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: number | null) => void\r\n    getStatusThunk: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n// @ts-ignore\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunk(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateProps = (state: AppStateType): mapStatePropsType => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect<mapStatePropsType, mapDispatchPropsType, OwnProps, AppStateType>\r\n    (mapStateProps, {getUserProfileThunkCreator, getStatusThunk, updateStatus}),\r\n    withRouter,\r\n    /* WithAuthRedirect*/\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}