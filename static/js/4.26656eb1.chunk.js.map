{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","value","sendMessage","mapStatePropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCiBnKC,EAVI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,U,kCCFhCC,EAAU,SAACT,GACb,OACI,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMU,WA2BpCC,EAAYC,YAAiB,KAiB7BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAhBL,SAACd,GACpB,OACI,uBAAMgB,SAAYhB,EAAMiB,aAAxB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXZ,KAAM,iBACNa,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAGhC,8BAAK,kDAQFa,EA3CC,SAACxB,GACb,IAAMyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAW,cAAC,EAAD,CAAuBtB,KAAMsB,EAAEtB,KAAMN,GAAI4B,EAAE5B,IAA1B4B,EAAE5B,OAClE6B,EAAmBN,EAAMO,SAASH,KAAK,SAACI,GAAD,OAAW,cAAC,EAAD,CAAoBvB,QAASuB,EAAEvB,SAAjBuB,EAAE/B,OACjDuB,EAAMS,eAM7B,OACI,sBAAK/B,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE+B,aAAlB,SACKR,IAEL,sBAAKxB,UAAWC,IAAE4B,SAAlB,UACI,oCAAOD,EAAP,OACA,cAAClB,EAAD,CAAqBG,SAVX,SAACoB,GACnBpC,EAAMqC,YAAYD,EAAMF,0B,6DCjB1BI,EAA2B,SAACb,GAAD,MAAuD,CACpFc,OAAQd,EAAMe,KAAKD,SCgCRE,sBACXC,aAZkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACiB,GACxB,MAAO,CACHN,YAAa,SAACH,GACVS,EAASC,YAAmBV,UD3BR,SAACW,GAAmB,IAC1CC,EADyC,4JAE3C,WACI,OAAIC,KAAK/C,MAAMuC,OACR,cAACM,EAAD,eAAeE,KAAK/C,QADG,cAAC,IAAD,CAAUO,GAAI,eAHL,GACfyC,IAAMH,WAStC,OAFoCH,YAAQJ,EAARI,CAAkCI,KCsB3DL,CAGbjB","file":"static/js/4.26656eb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__W-3Fz\",\"dialogsItems\":\"Dialogs_dialogsItems__c99xJ\",\"active\":\"Dialogs_active__2pSRv\",\"messages\":\"Dialogs_messages__24u-W\",\"message\":\"Dialogs_message__19j9C\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n}\nconst DialogItem = (props: DialogItemPropsType) => {\n    let path = \"/dialogs/\" + props.id;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport TextArea from \"../common/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\nconst Message = (props: any) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\nconst Dialogs = (props: DialogsPropsType) => {\n    const state = props.dialogsPage;\n\n    const dialogsElements = state.dialogs.map((d:any )=> <DialogItem key={d.id} name={d.name} id={d.id}/>);\n    const messagesElements = state.messages.map( (m:any) => <Message key={m.id} message={m.message}/>);\n    const newMessageBody = state.newMessageBody;\n\n\n    const addNewMessage = (value:any) => {\n        props.sendMessage(value.newMessageBody);\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div> {messagesElements} </div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n\n        </div>)\n}\n\nconst maxLength = maxLengthCreator(100)\nconst AddMessageForm = (props:any) => {\n    return (\n        <form onSubmit = {props.handleSubmit}>\n            <div>\n                <Field component={TextArea}\n                       name={'newMessageBody'}\n                       placeholder={'Enter your message'}\n                       validate={[required, maxLength]}\n                />\n            </div>\n            <div><button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({\n    form: \"dialogAddMessageForm\"})(AddMessageForm)\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/reduxe-store\";\r\nimport {connect} from \"react-redux\";\r\ntype mapStatePropsForRedirectType = {\r\n    isAuth:boolean\r\n}\r\nconst mapStatePropsForRedirect = (state: AppStateType):mapStatePropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport const WithAuthRedirect = (Component:any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n   let ConnectedAuthRedirectComponent = connect(mapStatePropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};\r\n\r\n","import React from 'react';\nimport {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxe-store\";\nimport {compose, Dispatch} from 'redux';\n\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\ntype MessagesType = {\n    id: number\n    message: string\n}\ntype DialogsType = {\n    id: number\n    name: string\n}\nexport type dialogPageType = {\n    messages: Array<MessagesType>\n    dialogs: Array<DialogsType>\n    newMessageBody: string\n}\ntype MapStatePropsType = {\n    dialogsPage: dialogPageType\n}\ntype MapDispatchPropsType = {\n    sendMessage: (newMessageBody:string) => void\n}\nexport type DialogsPropsType = MapDispatchPropsType & MapStatePropsType\n\nconst mapStateProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        sendMessage: (newMessageBody:string) => {\n            dispatch(sendMessageCreator(newMessageBody))}\n    }\n}\nexport default compose<React.ComponentType>(\n    connect(mapStateProps, mapDispatchToProps),\n    WithAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}